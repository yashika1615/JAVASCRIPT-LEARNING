// everything in js happens inside the exceution context(assume it to be a big box or a 
// container in which the whole javascript code is to executed)


*How JavaScript works?
Ans-Everything in JavaScript happens inside an "execution context".

Execution context has two component
(1)memory component[variable environment] 
-This is the place where all variables and functions are stored as key value pairs. eg-{key: value ||  n:2;} 

 (2)code component[Thread of execution]
-This is the place where code is executed one line at a time
That whole thing is called as execution context inside that there two things 
1.Memory component
2.Code component
In memory component variable and functions values can be stored in a  key value format.
Code component is a place where whole JavaScript code is executed
Memory component is also called as variable environment 
And code component is also called as thread of execution.

var- function scoped
const and let - block scoped

are let, var and cost hoisted?

in case of var, 
  clg(a);
  var a=10;
// ismain humne a ko define hi nhin kiya hai
 toh clg kne pe not defined aana chahiye par yeh 
 undefined aata hai - so what happens is javascript ka thread
 pure code ko execute karta hai aur jo bhi variables hote hain unko
 memory allocation kar deta hai toh jaise usko a mila
 toh usko undefined se memory allocate hui toh jab usko value dedi uske passs value chali gyi

jab usko memory allocate hui tab uski hoisting huii
  var is hoisted , functions are also hoisted

let is not hoisted 
  clg(a);
  let a=10;
// it will give error saying "cannot access a before initialization"

but agr hum b ko clg krein toh
 clg(b);
 clg(a);
 let a=10;

b will give error saying that not defined
but in a it will give that cannot access a before initializing
ao, conclusion hoisting is happening but not at that level
as it was happening in var 

what happens is that the value of a goes in temporal dead zone 
temporal dead zone- kisi bhi variable ke declaration se initilization tak ka time
hota hai temporal dead zone

all of them are hoisted but let and const have temporal dead zone

let cannot be redefined/redeclared but re-allocated
var can be redefined

in same scope let cannot be declared
Var can be redeclared in same scope but this cannot be 
let and const

let and const value can be updated

const c=30;
 c=40; // this will give error

const c=30;
function xyz(){
   const c=50;
   clg(c);
} 
xyz();  // this is block scope and value of const can be redefined but not update in this

var and let can be updated in the same cope but const cannot be updated

// arrow functions vs normal functions

  normal function 
      function regular() { }
  
  arrow function 
   var arrow= ()=>{ }

() - pass the arguments heree
=> - fat arrow function





Note-
*JavaScript is a synchronous single-threaded language

-Single threaded means JavaScript can execute once command at a time
-Synchronous single-threaded that means JavaScript can execute one command at a time in a specific order.
1. When JavaScript code is executed, Execution Context is created and it is called Global Execution Context.
2. JavaScript program is executed in TWO PHASES inside Execution Context
  a. MEMORY ALLOCATION PHASE - JavaScript program goes throughout the program and allocate memory of Variables and Functions declared in program.
  b. CODE EXECUTION PHASE -  JavaScript program now goes throughout the code line by line and execute the code. 
3. A Function is invoked when it is called and it acts as another MINI PROGRAM and creates its own Execution Context.
4. Returns keyword return the Control back to the PREVIOUS Execution-Context where the Function is called and Execution Context of the Function is DELETED.
5. CALL STACK maintains the ORDER of execution of Execution Contexts. It CREATES Execution Context whenever a Program starts or a Function is invoked and it pops out the Execution Context when a Function or Program ENDS.

// execution context
// consist of 2 components- memory component and code component
// memory component- heavy word for it variable en in which all the 
// function and varibales are stored it in a key value format
// code component or thread of exceution- where code is executed one line at a Time
// synchronous single threaded - single command at a time that also in a particular order i.e you can only go to next line when current
// line has finished executing
 // js is not possible without this exec context

1. Whenever any JavaScript code is executed an execution context is created and it is the Global Execution Context.
2. An Execution Context is basically a box which has two components called Memory Component(Variable Environment) and Code Component(Thread Of Execution).
3. The Execution context is created in two phases
   a. Memory Creation Phase : In this Phase, Memory is allocated to all the variables and functions which are present in the           global scope. Special keyword Undefined in case of variables and literally the whole function in case of functions.
   b. Code Execution Phase : In this Phase, code is executed line by line.

4. Whenever there is a function invocation an all new execution context is created and same process is followed again.
5. If there is any function parameter then it is also allocated memory while creating the execution context of the function.
6. Whenever return keyword is encountered , it means the task of function is over and it returns back the control of the program back to the place where it was invoked. and with this this execution context is deleted from stack.

7. Call Stack is basically a stack which maintains the order of execution of execution context. Whenever a code is executed the Global Execution Context is pushed into the stack first and later on as per the function invocation the  execution context is pushed into the stack. When the function code is done executing the execution context is popped out and last the Global Execution Context s also deleted.
what happens when you run a js program 
   An execution context is created

2 Golden Rules:
1. Variable declarations are scanned and are made undefined
2. Function declarations are scanned and are made available

1. In JS, before the code is executed, the variables get initialized to undefined.
2. Arrow functions enact as variables and get "undefined" during the memory creation phase while functions actually get run.
3. Hoisting: Mechanism in JS where the variable declarations are moved to the top of the scope before execution. Therefore it is possible to call a function before initializing it.
4. Whenever a JS program is run, a global execution block is created, which comprises of 2: Memory creation and Code execution.
5. Variable declarations are scanned and are made undefined
6. Function declarations are scanned and are made available1. In JS, before the code is executed, the variables get initialized to undefined.
2. Arrow functions enact as variables and get "undefined" during the memory creation phase while functions actually get run.
3. Hoisting: Mechanism in JS where the variable declarations are moved to the top of the scope before execution. Therefore it is possible to call a function before initializing it.
4. Whenever a JS program is run, a global execution block is created, which comprises of 2: Memory creation and Code execution.
5. Variable declarations are scanned and are made undefined
6. Function declarations are scanned and are made available

1. Hoisting in JavaScript is a process in which all the Variables, Functions and Class defination are declared BEFORE execution of the code 
3. Variables are initialised to UNDEFINED when they are declared and Function defination is stored AS IT IS.
4. They are declared in Memory Allocation Phase in the Memory Component of Execution Context, so we can use them even BEFORE they are declared.
5. UNDEFINED means Variable has been declared but value is not ASSIGNED but NOT DEFINED means Variables is NOT DECLARED.
6. When we assign Variable to a Function defination, we CAN NOT call this Variable as Function BEFORE declaration as it will behave as Variable with UNDEFINED value.

For arrow functions, we are storing function inside a variable, and when memory is allocated to variables it store undefined, so when we try to invoke the variable as a function, js finds undefined instead of a function, so it shows error  that getName() is not a function as that is actually a normal variable that you're are trying to access as a function............

Accessing function without initialising it - hoisiting

even before the code starts exceuting memory is allocated to varibales and functions

window object- the window object represents an pen window in a browser. it is browsers objec(not javascript)
and is automatically created by browser.
it is a global object with lots of properties and methods

 what is dom?
    when a web page is loaded, the browser creates a DOCUMENT OBJECT MODEL(DOM)
    of the page

          
          window 
            |
         DOCUMENT
            |
           html
        /         \
   head             body
/   /  \   \         /      \
meta   title link   div      script 
                  /   /  \  \
               img   h1  p   div


console.log - print
console.dir -> document -> properties and methods
window -> document

events in js-
The change in the state of an object is known as an events
events are fired to notify the code of "interesting changes" that may affect code execution

mouse events( click, double click etc)
keyboard events( keypress, keyup , keydown)
form events(submit etc)
print events and many more

the scope is default - global

*How JavaScript works?
Ans-Everything in JavaScript happens inside an "execution context".

Execution context has two component
1)memory component[variable environment] 
-This is the place where all variables and functions are stored as key value pairs. eg-{key: value ||  n:2;} 

 2)code component[Thread of execution]
-This is the place where code is executed one line at a time

Note-
*JavaScript is a synchronous single-threaded language

-Single threaded means JavaScript can execute once command at a time
-Synchronous single-threaded that means JavaScript can execute one command at a time in a specific order.

 Execution Context Creation and its 2 phases: Memory Allocation Phase and the Code Execution phase.

This video also answers questions about- 
Is Javascript Single-threaded or multi-threaded? 
Is JS Synchronous or asynchronous?

everything in js happens inside an execution context
like a big box and has 2 component- memory also known as variable env
2nd- code component known as thread of exceution
like a thread where the whole code is executed one line aat a time
js is synchronous single threaded language- can exceute one command at a time and only in specific order
js is not possible without this exceution context


//what happens when you excute a js code
exceution context is created
the exceution context is created in 2 phase- first is creation phase also known as memory creation phase
js will allocate memory to all varibales and functions

when it allocates memory to n it stores the values a undefined and incase of functions it stores the whole code
other varibales-undefined
 2nd phase-code exceution phase- line by line exceution

 when a new fuction is invoked a brand new exceution context iscreated
 
js is brain of web applications
js code is executed by something called js engine and every browser has its own js engine to execute its own js code
chrome has v8 engine
firefox has spidermonkey
microsoft has chakra
and safari has javascript code

node js is an open source and cross platform javascript runtime environment . It is a popular tool for almost any kind of project. 

types
primitive types/ value types
string 

no matter if the variable declared is float or integer the type is going to be number only

js/python- dynamic language
-both the type and the value can be changed

static language- value change but not type change

//reference types
0bjects/ arrays/functions
arrays and functions are objects only

how js code is executed-
execution context- environment consituting your env, variables, functions
everytime you run or exceute a javascript code theres and execution context created
 so initially theres a global exceution context created and everytime you craete a new function a new exceution context is created and will be added to the call stack 
 this execution context has 2 main components- the first component is before running the javascript code - memory is allocated to the variables and functions that is why this phase is called memory phase 
 and in the second phase the code is executed line by line - kavascript is synchronous single threaded language and that is why the second phase is called the code phase 

hoisting
temporal dead zone
window
this

let var const
//let, var and const
//const and let are more strict use const 
// whenever you want you want your value to be constant 
// and it cannot be changed , use let otherwise avoid using var

//lexical scope- you basically check where it is located and 
// can we access it or not


prinicple of least access- jitna kam access aur jyada output mile

in js two types of scope- local and global(functional scope)

classes and objects-
    a javascript object is an entity having state and behavious( properties and methos)
prototype in js-
   js objects have a special property called prototype.
   we can set prototype using _ _proto _ _proto
* if object and protoype have same emthod , objects method will be used

type of a prototype- reference to an object

jab OBJECT aur prototype donon ka methd ya function name same hoga toh object
ka method use hoga
 example: 
   
const employee={
   calctax() {
      console.log("the tax rate is 10%);
   },
};

const karanarjun={
   salary: 50000,
   calcTax(){
      console.log("the tax rate is 20%); 
        },
};

karanarjun.__proto__ = employee;

the output will be -
 "the tax rate will be 20%"

classes in js-
 - template
 - blueprint of an object
 class is a program code template for creating objects
 those objects will have some state(variables) and some behaviour (functions)
 inside it.

 class MyClass{
   constructor() {.....}
   mymethod() {.....}
 }

let myObj= new MyClass;

jo this ke saath hai voh object ki property hai aur jo doosra hai voh
jo as a argument pass kiya hai

constructor() method is : automatically invoked by new, initializes an object

class MyClass{
   constructor() {...}
   mymethod() {.....}
}

inheritance - inheritance is passing down properties and methods from parent class to child class

class Parent{

}

class Child extends Parent{

}


* if child and parent have same method,
 child method will be used (method overriding)

 class1 -> p1, p2, m1(), m2() 
          |
          |
      class2 -> extends

super keyword-
  is used to call a constructor of its parent class to access
  the parents properties and emthods

  super(args) // calls the parents constructor
  super.parentMethod(args)

// async js

// async await >> promises >> callback hell

sync is js-
 synchronous- synchronous means the code run in a particular
   sequence of instructions given in the program.
   each instruction waits for the PREVIOUS instructions to complete its executions.

asynchronous- due to synchronous programming, sometimes important 
instructions get blocked due to some previous instructions, which causes delay
in the UI. Asynchrnous code execution allows to execute next instructions immediately and doesnt block the flow.

setTimeout()- kisi function ko execute krta hai at which time

callback - function passed as an argument to another function

callback hell -nested callbacks stacked below one another
    forming a pyramid structure(pyramid of doon)
this style of rpogramming becomes difficult to understand and manage

setTimeout-  it will take function as an input and 
     and the time of how much time later we want to call that function

function hello(){
   clg("hello");
}

setTimeout(hello, 1000);

this setTimeout is not provided by javascript 
it is provided by browser






































